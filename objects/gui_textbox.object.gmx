<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_checkbox</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>gui_base</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// CHANGE SOME PROPERTIES //
width = 256;
height = 24;
image_single = 0;
// SPECIFIC PROPERTIES //
font = fnt_default;
colour = c_black;
colour_caption = c_ltgray;
caption = "Textbox";
text = "";
password = 0;
password_char = "*";
cursor_char = "_";
allowed_char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz1234567890,.';:&lt;&gt;()[]{}!?@£¢¤¬¦²³¼½¾|#\/$%&amp;*«»°+=_-¯~ " + '"';
max_length = 0; // 0 FOR NO LIMIT
margin = 6;
blink_speed = 2;
tab_next = noone;
tab_previous = noone;
callback = -1;
callback_enter = -1;
// SYSTEM //
blink = 0;
last_focus = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var focus = gui_is_focus(id);
if(focus) {
    if(!last_focus) {
        keyboard_string = text;
    }
    if(text != keyboard_string) {
        for(var a = 1; a &lt;= string_length(keyboard_string); a += 1) {
            if(string_count(string_char_at(keyboard_string, a), allowed_char) == 0) {
                keyboard_string = string_delete(keyboard_string, a, 1);
                a -= 1;
            }
        }
        if(max_length &gt; 0 &amp;&amp; string_length(keyboard_string) &gt; max_length) {
            keyboard_string = string_copy(keyboard_string, 1, max_length);
        }
        text = keyboard_string;
        if(script_exists(callback)) {
            script_execute(callback);
        }
    }
    if(keyboard_check_pressed(vk_enter)) {
        if(script_exists(callback_enter)) {
            script_execute(callback_enter);
        }
    }
    if(keyboard_check_pressed(vk_tab) &amp;&amp; last_focus) {
        if(keyboard_check(vk_shift)) {
            if(instance_exists(tab_previous)) {
                gui_focus(tab_previous);
            }
        } else {
            if(instance_exists(tab_next)) {
                gui_focus(tab_next);
            }
        }
    }
}
last_focus = focus;
gui_focus_on_click();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(gui_skin_exists(sprite_index)) {
    gui_skin_draw(sprite_index, image_index, x, y, width, height, image_blend, image_alpha);
} else {
    draw_sprite_ext(sprite_index, image_index, x, y, width / sprite_width, height / sprite_height, 0, image_blend, image_alpha);
}
var txt = caption;
var focus = gui_is_focus(id);
if(focus || text != "") {
    if(password) {
        txt = string_repeat(password_char, string_length(text));
    } else {
        txt = text;
    }
    while(string_width(string_replace_all(txt, "#", "\#") + cursor_char) &gt; width - margin * 2) {
        txt = string_delete(txt, 1, 1);
    }
    if(focus) {
        blink = (blink + blink_speed * delta_time * 0.000001) mod 2;
        if(blink &lt; 1) {
            txt += cursor_char;
        }
    } else {
        blink = 0;
    }
    draw_set_colour(colour);
} else {
    blink = 0;
    while(string_width(string_replace_all(txt, "#", "\#")) &gt; width - margin * 2) {
        txt = string_copy(txt, 1, string_length(txt) - 1);
    }
    draw_set_colour(colour_caption);
}
draw_set_font(font);
draw_set_halign(fa_left);
draw_set_valign(fa_center);
draw_text(round(x + margin), round(y + height * 0.5), string_replace_all(txt, "#", "\#"));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
